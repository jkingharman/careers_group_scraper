---
http_interactions:
- request:
    method: get
    uri: https://jobonline.thecareersgroup.co.uk/careersgroup/student/Vacancies.aspx?page=1&st=
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.5 Ruby/2.4.1p111 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - jobonline.thecareersgroup.co.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Server:
      - ''
      Set-Cookie:
      - ASP.NET_SessionId=xfnlmobucc5cnmqiu4yl0kt4; path=/; secure; HttpOnly
      - ASP.NET_SessionId=xfnlmobucc5cnmqiu4yl0kt4; path=/; secure; HttpOnly
      - __AntiXsrfToken=b6d1f0a7a51b4eb78d256e3111698739; path=/; secure; HttpOnly
      X-Xss-Protection:
      - 1;mode=block
      X-Frame-Options:
      - SAMEORIGIN
      X-Aspnet-Version:
      - ''
      Date:
      - Sun, 16 Sep 2018 17:33:37 GMT
      Content-Length:
      - '213884'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 16 Sep 2018 17:33:35 GMT
- request:
    method: get
    uri: https://jobonline.thecareersgroup.co.uk/careersgroup/student/DisplayVacancy.aspx?id=5a9d5003-ff09-4f95-82b0-d86331efe729
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.5 Ruby/2.4.1p111 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=xfnlmobucc5cnmqiu4yl0kt4; __AntiXsrfToken=b6d1f0a7a51b4eb78d256e3111698739
      Host:
      - jobonline.thecareersgroup.co.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Server:
      - ''
      X-Xss-Protection:
      - 1;mode=block
      X-Frame-Options:
      - SAMEORIGIN
      X-Aspnet-Version:
      - ''
      Date:
      - Sun, 16 Sep 2018 17:33:37 GMT
      Content-Length:
      - '70817'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 16 Sep 2018 17:33:36 GMT
- request:
    method: get
    uri: https://jobonline.thecareersgroup.co.uk/careersgroup/student/DisplayVacancy.aspx?id=a73cf9b2-a709-4b48-a670-331324aa068a
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.5 Ruby/2.4.1p111 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=xfnlmobucc5cnmqiu4yl0kt4; __AntiXsrfToken=b6d1f0a7a51b4eb78d256e3111698739
      Host:
      - jobonline.thecareersgroup.co.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Server:
      - ''
      X-Xss-Protection:
      - 1;mode=block
      X-Frame-Options:
      - SAMEORIGIN
      X-Aspnet-Version:
      - ''
      Date:
      - Sun, 16 Sep 2018 17:33:38 GMT
      Content-Length:
      - '70760'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 16 Sep 2018 17:33:37 GMT
- request:
    method: get
    uri: https://jobonline.thecareersgroup.co.uk/careersgroup/student/DisplayVacancy.aspx?id=12533920-c07d-4a29-bc1b-d5addb0624b5
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.5 Ruby/2.4.1p111 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=xfnlmobucc5cnmqiu4yl0kt4; __AntiXsrfToken=b6d1f0a7a51b4eb78d256e3111698739
      Host:
      - jobonline.thecareersgroup.co.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Server:
      - ''
      X-Xss-Protection:
      - 1;mode=block
      X-Frame-Options:
      - SAMEORIGIN
      X-Aspnet-Version:
      - ''
      Date:
      - Sun, 16 Sep 2018 17:33:39 GMT
      Content-Length:
      - '73803'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 16 Sep 2018 17:33:38 GMT
- request:
    method: get
    uri: https://jobonline.thecareersgroup.co.uk/careersgroup/student/DisplayVacancy.aspx?id=90747a59-6875-44d8-ba96-746e238e1203
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.5 Ruby/2.4.1p111 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=xfnlmobucc5cnmqiu4yl0kt4; __AntiXsrfToken=b6d1f0a7a51b4eb78d256e3111698739
      Host:
      - jobonline.thecareersgroup.co.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Server:
      - ''
      X-Xss-Protection:
      - 1;mode=block
      X-Frame-Options:
      - SAMEORIGIN
      X-Aspnet-Version:
      - ''
      Date:
      - Sun, 16 Sep 2018 17:33:40 GMT
      Content-Length:
      - '74719'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 16 Sep 2018 17:33:39 GMT
- request:
    method: get
    uri: https://jobonline.thecareersgroup.co.uk/careersgroup/student/DisplayVacancy.aspx?id=9b27b1c8-ffde-48f3-8db5-14c7b0d6462a
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.5 Ruby/2.4.1p111 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=xfnlmobucc5cnmqiu4yl0kt4; __AntiXsrfToken=b6d1f0a7a51b4eb78d256e3111698739
      Host:
      - jobonline.thecareersgroup.co.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Server:
      - ''
      X-Xss-Protection:
      - 1;mode=block
      X-Frame-Options:
      - SAMEORIGIN
      X-Aspnet-Version:
      - ''
      Date:
      - Sun, 16 Sep 2018 17:33:40 GMT
      Content-Length:
      - '78228'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 16 Sep 2018 17:33:39 GMT
- request:
    method: get
    uri: https://jobonline.thecareersgroup.co.uk/careersgroup/student/DisplayVacancy.aspx?id=1f122905-547c-45d9-b4d0-d5cbc05a30b0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.5 Ruby/2.4.1p111 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=xfnlmobucc5cnmqiu4yl0kt4; __AntiXsrfToken=b6d1f0a7a51b4eb78d256e3111698739
      Host:
      - jobonline.thecareersgroup.co.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Server:
      - ''
      X-Xss-Protection:
      - 1;mode=block
      X-Frame-Options:
      - SAMEORIGIN
      X-Aspnet-Version:
      - ''
      Date:
      - Sun, 16 Sep 2018 17:33:41 GMT
      Content-Length:
      - '72711'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 16 Sep 2018 17:33:40 GMT
- request:
    method: get
    uri: https://jobonline.thecareersgroup.co.uk/careersgroup/student/DisplayVacancy.aspx?id=be98a3fa-475d-48fe-943b-d9595c5beb85
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.5 Ruby/2.4.1p111 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=xfnlmobucc5cnmqiu4yl0kt4; __AntiXsrfToken=b6d1f0a7a51b4eb78d256e3111698739
      Host:
      - jobonline.thecareersgroup.co.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Server:
      - ''
      X-Xss-Protection:
      - 1;mode=block
      X-Frame-Options:
      - SAMEORIGIN
      X-Aspnet-Version:
      - ''
      Date:
      - Sun, 16 Sep 2018 17:33:41 GMT
      Content-Length:
      - '72937'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 16 Sep 2018 17:33:41 GMT
- request:
    method: get
    uri: https://jobonline.thecareersgroup.co.uk/careersgroup/student/DisplayVacancy.aspx?id=84d7ad21-ec40-4fb3-a9ea-baa17bbdf550
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.5 Ruby/2.4.1p111 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=xfnlmobucc5cnmqiu4yl0kt4; __AntiXsrfToken=b6d1f0a7a51b4eb78d256e3111698739
      Host:
      - jobonline.thecareersgroup.co.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Server:
      - ''
      X-Xss-Protection:
      - 1;mode=block
      X-Frame-Options:
      - SAMEORIGIN
      X-Aspnet-Version:
      - ''
      Date:
      - Sun, 16 Sep 2018 17:33:42 GMT
      Content-Length:
      - '69971'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 16 Sep 2018 17:33:41 GMT
- request:
    method: get
    uri: https://jobonline.thecareersgroup.co.uk/careersgroup/student/DisplayVacancy.aspx?id=b5c42e29-7a40-4b20-89b4-93a90135a0cd
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.5 Ruby/2.4.1p111 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=xfnlmobucc5cnmqiu4yl0kt4; __AntiXsrfToken=b6d1f0a7a51b4eb78d256e3111698739
      Host:
      - jobonline.thecareersgroup.co.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Server:
      - ''
      X-Xss-Protection:
      - 1;mode=block
      X-Frame-Options:
      - SAMEORIGIN
      X-Aspnet-Version:
      - ''
      Date:
      - Sun, 16 Sep 2018 17:33:42 GMT
      Content-Length:
      - '75256'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 16 Sep 2018 17:33:42 GMT
- request:
    method: get
    uri: https://jobonline.thecareersgroup.co.uk/careersgroup/student/DisplayVacancy.aspx?id=6f2815e0-2c38-45b7-8634-c13822ef2180
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.5 Ruby/2.4.1p111 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=xfnlmobucc5cnmqiu4yl0kt4; __AntiXsrfToken=b6d1f0a7a51b4eb78d256e3111698739
      Host:
      - jobonline.thecareersgroup.co.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Server:
      - ''
      X-Xss-Protection:
      - 1;mode=block
      X-Frame-Options:
      - SAMEORIGIN
      X-Aspnet-Version:
      - ''
      Date:
      - Sun, 16 Sep 2018 17:33:44 GMT
      Content-Length:
      - '70766'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 16 Sep 2018 17:33:43 GMT
recorded_with: VCR 3.0.3
